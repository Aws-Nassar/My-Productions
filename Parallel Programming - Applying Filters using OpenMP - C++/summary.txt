//Aws Ahmad Nassar
//12027708
[*] I will first explain the idea of solving the assignment related to applying the mask to the image, as I received three files through cmd: the first is the file that contains the first image in matrix form, the second is the mask file also in matrix form, and the third is the file in which I will store the output after applying the mask to this image (the new image).
$ g++ -o main apply_filter.cpp, using argv[1-3].

[*] Then I read the data from the two(oimage.txt, mask.txt) files using the fstream library,where I read the dimensions of the image (row, column) and then the cells inside the file. Likewise, in the mask, I read the values directly and then called the I use a four for loops, which will apply the mask.
$ ifstream inputImg(originalImage), using this satatement (inputImg >> rowCount).

[*] Next, I created 4 for loops, where the first two represent the pixel to which the filter will be applied, and the other two represent the dimensions of the mask that will be applied according to the following rule:

NewImg[i][j] = mask[0][0] * OImag[i-1][j-1] + mask[0][1] * OImag[i][j-1] + mask[0][2] * OImag[i+1][j-1] + mask[1][0] * OImag[i-1][j] + mask[1][1] * OImag[i][j] + mask[1][2] * OImag[i+1][j] + mask[2][0] * OImag[i-1][j+1] + mask[2][1] * OImag[i][j+1] + mask[2][2] * OImag[i+1][j+1]

and I put an if statement to check if the pixel around the wanted one is inside the image boundary. And another one to check if the new pixel valuse iside the boundary of gray scale image

[*] Then, after each iteration, I store the value inside the output matrix. After that, I store the output matrix inside the file using ofstream(outputImg << newImgMatrix[i][j]).

[*] The difference between the serial code and parallel code are:
    1. I take the thread count from the cmd as a parameter and define array of threads.
    3. I use #pragma omp parallel for num_threads(threadNum) to divide loop iterations into the threadNum so the loop will be accessed by number of threads each thread has its own share of rows from the original image matrix.

[*] I use matlab to Compare results(new image) for all the kernels in parallal and serial using this part of code:
    >> Serial_Img_Blur = dlmread('Serial_New_Img_Blur.txt');
    >> Serial_Img_Blur(1, :) = [];
    >> subplot(4, 2, 7);
    >> imshow(Serial_Img_Blur, [0, 255]);
    >>title('Serial Blur Image');


[*] Time and speedup:-
// Time from function wall time and Speedup = Serial Time / Parallel Time
//I have 8 processor so I will run the parallel code with p(number of threads) start from 1 - 8 :-

    1. Serial code elapsed time = 0.00410509

    2. Parallel code with 1 thread/s elapsed time = 0.00420499 ------> Speedup = 0.976

    3. Parallel code with 2 thread/s elapsed time = 0.00401902 ------> Speedup = 1.021

    4. Parallel code with 3 thread/s elapsed time = 0.00395107 ------> Speedup = 1.039

    5. Parallel code with 4 thread/s elapsed time = 0.00390291 ------> Speedup = 1.052

    6. Parallel code with 5 thread/s elapsed time = 0.00388885 ------> Speedup = 1.056

    7. Parallel code with 6 thread/s elapsed time = 0.00378704 ------> Speedup = 1.084

    8. Parallel code with 7 thread/s elapsed time = 0.00365305 ------> Speedup = 1.122

    9. Parallel code with 8 thread/s elapsed time = 0.00365806 ------> Speedup = 1.122
